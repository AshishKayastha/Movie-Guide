apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply from: '../tools/versioning.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.ashish.movieguide"
        minSdkVersion 21
        targetSdkVersion 25
        versionName version
        versionCode buildVersionCode()

        buildConfigField 'String', 'TMDB_API_KEY', TMDB_API_KEY
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = file("../tools/signing.properties")
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            keyAlias keystoreProperties['RELEASE_KEY_ALIAS']
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
            storeFile file(keystoreProperties['RELEASE_STORE_FILE'])
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            // Perform extra task for release build type
            if (variant.buildType.name.contains('release')) {

                // Change release file name to "Movie Guide v{versionName}.apk"
                variant.outputs.each { output ->
                    def apk = output.outputFile;
                    def newName = "Movie Guide v" + defaultConfig.versionName + ".apk";
                    output.outputFile = new File(apk.parentFile, newName);
                }

                variant.assemble.doLast {
                    def path = null;
                    variant.outputs.each { output ->
                        //noinspection GrReassignedInClosureLocalVar
                        path = output.outputFile

                        // Delete unaligned apk file
                        File aligned = output.outputFile
                        File unaligned = output.packageApplication.outputFile;
                        if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                            unaligned.delete()
                        }
                    }

                    // Show file in explorer/finder
                    exec {
                        if (System.properties['os.name'].toLowerCase().contains('windows')) {
                            ['explorer', '/select,', path].execute()
                        } else if (System.properties['os.name'].toLowerCase().contains('mac os x')) {
                            ['open', '-R', path].execute()
                        }
                    }
                }
            }
        }
    }

    lintOptions {
        xmlReport false
        warningsAsErrors true
        lintConfig file("$project.rootDir/tools/lint.xml")
        htmlOutput file("$project.buildDir/outputs/lint/lint.html")
    }

    dexOptions {
        maxProcessCount 4
        threadCount 8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dexcount {
    format = "json"
    verbose = false
    includeClasses = true
    includeFieldCount = false
    orderByMethodCount = true
}

repositories {
    maven { url "https://clojars.org/repo/" }
}

dependencies {
    // Support Libraries
    compile "com.android.support:design:$versions.supportLibVersion"
    compile "com.android.support:customtabs:$versions.supportLibVersion"
    compile "com.android.support:palette-v7:$versions.supportLibVersion"
    compile "com.android.support:cardview-v7:$versions.supportLibVersion"

    // Timber for logging
    compile "com.jakewharton.timber:timber:$versions.timberVersion"

    // Glide (Image Loading)
    compile "com.github.bumptech.glide:glide:$versions.glideVersion"
    compile "com.github.bumptech.glide:okhttp3-integration:$versions.glideOkHttp3Version"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlinVersion"

    // Retrofit 2
    compile "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$versions.retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofitVersion"

    // OkHttp
    compile "com.squareup.okhttp3:logging-interceptor:$versions.okHttpVersion"

    // RxJava 2/RxAndroid 2
    compile "io.reactivex.rxjava2:rxjava:$versions.rxJava2Version"
    compile "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid2Version"

    // Dagger 2
    compile "com.google.dagger:dagger:$versions.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$versions.daggerVersion"

    // IcePick
    compile "frankiesardo:icepick:$versions.icepickVersion"
    kapt "frankiesardo:icepick-processor:$versions.icepickVersion"

    // Paper Parcel
    compile "nz.bradcampbell:paperparcel:$versions.paperParcelVersion"
    kapt "nz.bradcampbell:paperparcel-compiler:$versions.paperParcelVersion"

    // Leak Canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$versions.leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanaryVersion"
}