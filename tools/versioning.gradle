ext.versions = [
        //Plugins
        kotlinVersion            : '1.2.10',
        dexCountPluginVersion    : '0.8.2',

        // Libraries
        daggerVersion            : '2.14.1',
        leakCanaryVersion        : '1.5.4',
        stethoVersion            : '1.5.0',
        requeryVersion           : '1.4.1',
        timberVersion            : '4.6.0',
        icepickVersion           : '3.2.0',
        retrofitVersion          : '2.3.0',
        rxJava2Version           : '2.1.7',
        rxAndroid2Version        : '2.0.1',
        paperParcelVersion       : '2.0.4',
        glideVersion             : '4.4.0',
        supportLibVersion        : '27.0.2',
        loggingInterceptorVersion: '2.0.3'
]

ext {
    /**
     * Builds an Android version code from the version of the project.
     * This is designed to handle the -SNAPSHOT and -RC format.
     *
     * I.e. during development the version ends with -SNAPSHOT. As the code stabilizes and release nears
     * one or many Release Candidates are tagged. These all end with "-RC1", "-RC2" etc.
     * And the final release is without any suffix.
     * @return
     */
    buildVersionCode = {
        // The rules is as follows:
        // -SNAPSHOT counts as 0
        // -RC* counts as the RC number, i.e. 1 to 98
        // final release counts as 99.
        // Thus you can only have 98 Release Candidates, which ought to be enough for everyone

        def candidate = "99"
        def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')
        if (patch.endsWith("snapshot")) {
            candidate = "0"
            patch = patch.replaceAll("[^0-9]", "")
        } else {
            def rc
            (patch, rc) = patch.tokenize("rc")
            if (rc) {
                candidate = rc
            }
        }

        (major, minor, patch, candidate) = [major, minor, patch, candidate].collect { it.toInteger() }

        (major * 1000000) + (minor * 10000) + (patch * 100) + candidate
    }
}